public Polynomial add(Polynomial pol) {
		/*
		 * int maxLen = (pol.coefficients.length > coefficients.length) ?
		 * pol.coefficients.length : coefficients.length;
		 * int minLen = (pol.coefficients.length < coefficients.length) ?
		 * pol.coefficients.length : coefficients.length;
		 * double[] retNum = new double[maxLen];
		 * int i = 0;
		 * for (i = 0; i < minLen; i++) {
		 * retNum[i] += pol.coefficients[i];
		 * retNum[i] += coefficients[i];
		 * }
		 * if (pol.coefficients.length > coefficients.length) {
		 * for (int j = i; j < maxLen; j++) {
		 * retNum[j] = pol.coefficients[j];
		 * }
		 * } else {
		 * for (int j = i; j < maxLen; j++) {
		 * retNum[j] = coefficients[j];
		 * }
		 * }
		 */
		// set up key value pairs
		double[][] polDict = new double[pol.exps.length][2];
		double[][] Dict = new double[exps.length][2];
		for (int i = 0; i < pol.exps.length; i++) {
			polDict[i][0] = pol.coefficients[i];
			polDict[i][1] = pol.exps[i];
		}
		for (int i = 0; i < exps.length; i++) {
			Dict[i][0] = coefficients[i];
			Dict[i][1] = exps[i];
		}
		// System.out.println(Arrays.deepToString(Dict));
		// System.out.println(Arrays.deepToString(polDict));
		int count = 0;
		boolean a = true;
		int[] expTest = new int[pol.exps.length];
		// find new array where values are not the same as exps
		for (int i = 0; i < pol.exps.length; i++) {
			for (int j = 0; j < exps.length; j++) {
				if (exps[j] == pol.exps[i]) {
					a = false;
					// add coeff for repeating exps
					Dict[j][0] += pol.coefficients[i];
					polDict[i][0] = Dict[j][0];
				}
			}
			if (a == true) {
				expTest[count] = pol.exps[i];
				count++;
			}
			a = true;
		}
		// System.out.println(Arrays.toString(expTest));
		// add expTest and exps together to new array
		int[] retExps = new int[exps.length + count];
		// System.out.println(exps.length);
		int i = 0;
		for (i = 0; i < exps.length; i++) {
			retExps[i] = exps[i];
		}
		for (int j = 0; j < count; j++) {

			retExps[i + j] = expTest[j];
		}
		// System.out.println(Arrays.toString(retExps));
		// bubble sort
		bubbleSort(retExps);
		double[] retCoeff = new double[retExps.length];
		for (int k = 0; k < retExps.length; k++) {
			for (int l = 0; l < polDict.length; l++) {
				if (retExps[k] == polDict[l][1]) {
					retCoeff[k] = polDict[l][0];
				}
			}
			for (int m = 0; m < Dict.length; m++) {
				if (retExps[k] == Dict[m][1]) {
					retCoeff[k] = Dict[m][0];
				}
			}
		}
		Polynomial polly = new Polynomial(retCoeff, retExps);
		return polly;
	}

	void bubbleSort(int arr[]) {
		int n = arr.length;
		for (int i = 0; i < n - 1; i++)
			for (int j = 0; j < n - i - 1; j++)
				if (arr[j] > arr[j + 1]) {
					// swap temp and arr[i]
					int temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
	}